{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["initialPositionX","initialPositionY","positionX","positionY","firstDirectionGrowth","index","initialTable","Table","state","direction","body","validateBody","dirGrowthCurrent","initialBody","console","log","i","_this","filterDirection","_this$updatePosition","updatePosition","_this$updatePosition2","Object","slicedToArray","attachToBodyArray","keyDownHandler","_ref","key","setState","convertKeytoDirection","lastDirection","dirGrowthFiltered","X","this","closureFunction","deleteOpositeDirection","Math","floor","random","length","concat","allowedDirection","filter","num","dirGrowth","initialPosition","valueCase1","valueCase2","directionDeleted1","directionDeleted2","bodyArray","arguments","undefined","toString","toConsumableArray","slice","_this2","_this$validateBody","_this$validateBody2","setInterval","timeOutHandler","document","addEventListener","foodIndex","updatedTable","map","item","includes","match","_this$state","_this$updatePosition3","_this$updatePosition4","_this3","x","y","filteredTable","react_default","a","createElement","className","Component","App","_useState","useState","_useState2","showTable","setShowTable","onClick","Table_Table","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.065f80a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles/table.css\";\r\n\r\nlet firstDirectionGrowth = 10;\r\nlet initialPositionX, initialPositionY;\r\nlet positionX, positionY;\r\nvar index = 0;\r\nvar initialTable = [];\r\nlet addBlockForward = true;\r\n\r\nexport default class Table extends Component {\r\n  state = {\r\n    direction: 0,\r\n    body: []\r\n  };\r\n\r\n  validateBody = () => {\r\n    var dirGrowthCurrent = 10; // Guarda la direccion hacia donde crecera el snake\r\n    var initialBody = [\"7&7\"]; // Acumulado de valores que cumplen con las restricciones\r\n    var body = [];\r\n    // let initialDirection = Math.floor(Math.random() * 16);\r\n    // let initialPositionX = Math.floor(Math.random() * 16);\r\n\r\n    initialPositionX = 7;\r\n    initialPositionY = 7;\r\n\r\n    console.log(\r\n      \"Posicion Inicial: \" + initialPositionX + \" \" + initialPositionY\r\n    );\r\n    // Incio de Loop con initialPositionX y initialPositionY establecidos\r\n    positionX = initialPositionX;\r\n    positionY = initialPositionY;\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      //Generacion de cada bloque del cuerpo inicial del snake\r\n      ///// Se obtiene la primera direccion a donde debe crecer el cuerpo [0,1,2,3]\r\n      dirGrowthCurrent = this.filterDirection(\r\n        positionX,\r\n        positionY,\r\n        dirGrowthCurrent\r\n      );\r\n      ////// Se guerda la primera direccion de crecimiento\r\n      i === 0 && (firstDirectionGrowth = dirGrowthCurrent);\r\n      /////Actualizacion de Coordenadas\r\n\r\n      [positionX, positionY] = this.updatePosition(\r\n        dirGrowthCurrent,\r\n        positionX,\r\n        positionY\r\n      );\r\n\r\n      ////// Adjunta la nueva posicion al cuerpo del snake\r\n      body = this.attachToBodyArray(initialBody, positionX, positionY);\r\n      initialBody = body;\r\n    }\r\n\r\n    // Generacion de la direccion inicial del snake\r\n    ////// Se usa la primera direccion de crecimiento para eliminar su opuesto\r\n    firstDirectionGrowth === 0 && (dirGrowthCurrent = 2);\r\n    firstDirectionGrowth === 1 && (dirGrowthCurrent = 3);\r\n    firstDirectionGrowth === 2 && (dirGrowthCurrent = 0);\r\n    firstDirectionGrowth === 3 && (dirGrowthCurrent = 1);\r\n    ////// Filtrado de la direccion inicial de movimiento\r\n    dirGrowthCurrent = this.filterDirection(\r\n      initialPositionX,\r\n      initialPositionY,\r\n      dirGrowthCurrent\r\n    );\r\n    return [body, dirGrowthCurrent];\r\n  };\r\n\r\n  updatePosition(dirGrowthCurrent, positionX, positionY) {\r\n    switch (dirGrowthCurrent) {\r\n      case 3:\r\n        positionX--;\r\n        break;\r\n      case 0:\r\n        positionY--;\r\n        break;\r\n      case 1:\r\n        positionX++;\r\n        break;\r\n      case 2:\r\n        positionY++;\r\n        break;\r\n      default:\r\n    }\r\n    return [positionX, positionY];\r\n  }\r\n\r\n  filterDirection(initialPositionX, initialPositionY, lastDirection) {\r\n    var dirGrowthFiltered = [];\r\n    var X = this.closureFunction();\r\n\r\n    X(initialPositionX, 15, 0, 1, 3); // filtrado de X\r\n    dirGrowthFiltered = X(initialPositionY, 0, 15, 0, 2); // filtrado de Y\r\n\r\n    dirGrowthFiltered = this.deleteOpositeDirection(\r\n      lastDirection,\r\n      dirGrowthFiltered\r\n    );\r\n\r\n    lastDirection =\r\n      dirGrowthFiltered[Math.floor(Math.random() * dirGrowthFiltered.length)];\r\n    console.log(`El ultimo valor de: ${dirGrowthFiltered}`);\r\n    return lastDirection;\r\n  }\r\n\r\n  deleteOpositeDirection(direction, allowedDirection) {\r\n    switch (direction) {\r\n      case 0:\r\n        return allowedDirection.filter(num => num !== 2);\r\n      case 2:\r\n        return allowedDirection.filter(num => num !== 0);\r\n      case 1:\r\n        return allowedDirection.filter(num => num !== 3);\r\n      case 3:\r\n        return allowedDirection.filter(num => num !== 1);\r\n      default:\r\n        return allowedDirection;\r\n    }\r\n  }\r\n\r\n  closureFunction() {\r\n    let dirGrowth = [0, 1, 2, 3]; // 0:arriba, 1:derecha, 2:abajo, 3: izquierda\r\n\r\n    function filterDirection(\r\n      initialPosition,\r\n      valueCase1,\r\n      valueCase2,\r\n      directionDeleted1,\r\n      directionDeleted2\r\n    ) {\r\n      switch (initialPosition) {\r\n        case valueCase1:\r\n          dirGrowth = dirGrowth.filter(num => num !== directionDeleted1);\r\n          return dirGrowth;\r\n        case valueCase2:\r\n          dirGrowth = dirGrowth.filter(num => num !== directionDeleted2);\r\n          return dirGrowth;\r\n        default:\r\n          return dirGrowth;\r\n      }\r\n    }\r\n    return filterDirection;\r\n  }\r\n\r\n  attachToBodyArray(bodyArray, positionX, positionY, addBlockForward = false) {\r\n    return addBlockForward\r\n      ? [`${positionX.toString()}&${positionY.toString()}`, ...bodyArray].slice(\r\n          0,\r\n          bodyArray.length\r\n        )\r\n      : [...bodyArray, `${positionX.toString()}&${positionY.toString()}`];\r\n  }\r\n\r\n  componentDidMount() {\r\n    let [body, direction] = this.validateBody();\r\n    this.setState({\r\n      body,\r\n      direction\r\n    });\r\n    console.log(`Su primer movimieto sera hacia: ${direction}`);\r\n\r\n    setInterval(() => {\r\n      this.timeOutHandler();\r\n    }, 200); // A mayor valorm mayor velocidad y mayor dificultad\r\n\r\n    document.addEventListener(\"keydown\", this.keyDownHandler);\r\n\r\n    var updatedTable = initialTable.map(item => {\r\n      return body.includes(item) ? \"filled\" : item;\r\n    });\r\n\r\n    let match = true;\r\n    let foodIndex;\r\n    while (match) {\r\n      foodIndex = Math.floor(Math.random() * updatedTable.length);\r\n      console.log(`intentos ${updatedTable[foodIndex]}`);\r\n      updatedTable[foodIndex] === \"filled\" ? (match = true) : (match = false);\r\n    }\r\n    console.log(`La comida se encuentra en ${updatedTable[foodIndex]}`);\r\n    console.log(`El cuerpo inicial del snake esta en ${body}`);\r\n\r\n    // Generar de manera aleatoria la posicion de la comida, eliminando los campos que tienen fill\r\n    // obtener el col&fila y en el render hacer un if haciendo que pinte la casilla\r\n\r\n    // esta operacion se debe repetir en el componentedidupdate\r\n    // por loq eu seria bueno hacer una funcion\r\n\r\n    // en el componentedidupdate se debe analizar si se comio el alimento, si lo hizo, entonces ejecutar\r\n    // la funcion que genera la posicion aleatoria de la comida.\r\n\r\n    // console.log(updatedTable);\r\n  }\r\n\r\n  keyDownHandler = ({ key }) => {\r\n    console.log(\"Se presiono\");\r\n    console.log(key);\r\n    this.setState({\r\n      direction: this.convertKeytoDirection(key)\r\n    });\r\n  };\r\n\r\n  convertKeytoDirection(key) {\r\n    let direction;\r\n    key === \"ArrowUp\" && (direction = 0);\r\n    key === \"ArrowRight\" && (direction = 1);\r\n    key === \"ArrowDown\" && (direction = 2);\r\n    key === \"ArrowLeft\" && (direction = 3);\r\n    return direction;\r\n  }\r\n\r\n  timeOutHandler() {\r\n    var { direction, body } = this.state;\r\n    [initialPositionX, initialPositionY] = this.updatePosition(\r\n      direction,\r\n      initialPositionX,\r\n      initialPositionY\r\n    );\r\n\r\n    this.setState({\r\n      body: this.attachToBodyArray(\r\n        body,\r\n        initialPositionX,\r\n        initialPositionY,\r\n        addBlockForward\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    index = 0;\r\n    initialTable = [];\r\n    for (let x = 0; x < 16; x++) {\r\n      for (let y = 0; y < 16; y++) {\r\n        initialTable[index] = `${y}&${x}`;\r\n        index++;\r\n      }\r\n    }\r\n    var filteredTable = initialTable.map(item => (\r\n      <div\r\n        className={`square ${this.state.body.includes(item).toString()} ${\r\n          this.state.body[0] === item ? \"initial\" : \"\"\r\n        }`}\r\n      >\r\n        {item}{\" \"}\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"table\">\r\n        <div className=\"grid-table\">{filteredTable}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  const [showTable, setShowTable] = useState(false);\n  return (\n    <div className=\"header\">\n      <h1>TWISTED SNAKE!</h1>\n      <p>\n        Hasta la última implementación del juego, se ha logrado hacer que el\n        movimiento del snake sea utilizando las teclas, sin considerar el\n        control inverso. <br /> Para mover al snake, presiona las teclas de:\n      </p>\n      <h5>Ir hacia arriba</h5>\n      <h5>Ir hacia abajo</h5>\n      <h5>Ir hacia la derecha</h5>\n      <h5>Ir hacia la izquierda</h5>\n      <button\n        onClick={() => {\n          setShowTable(true);\n        }}\n      >\n        Empezar el Juego!\n      </button>\n      {showTable && <Table />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}